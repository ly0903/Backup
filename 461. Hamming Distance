"""
The Hamming distance between two integers is the number of positions at which the corresponding bits are different.

Given two integers x and y, calculate the Hamming distance.

Note:
0 ≤ x, y < 2^31.

Example:

Input: x = 1, y = 4

Output: 2

Explanation:
1   (0 0 0 1)
4   (0 1 0 0)
       ↑   ↑

The above arrows point to positions where the corresponding bits are different.
"""
//n & (n-1) converts the right most 1 to 0

//cpp
class Solution {
public:
    int hammingDistance(int x, int y) {
        int dist = 0, n = x ^ y; //xor: same->0, diff->1
        while(n){
            ++dist; //counts how may bits we have turned off(set to 0)
            n &= n - 1; // turns off(set to 0) the right most 1 bit
        }
        return dist;
    }
};

#python1 the quickest solution in python for now
class Solution(object):
    def hammingDistance(self, x, y):
        """
        :type x: int
        :type y: int
        :rtype: int
        """
        x = x ^ y
        y = 0
        while x:
            y += 1
            x = x & (x - 1)  ##number of ones in x has been reduced by one
        return y
        
#python2
class Solution(object):
    def hammingDistance(self, x, y):
        """
        :type x: int
        :type y: int
        :rtype: int
        """
        z = bin(x^y)
        return z.count('1')
