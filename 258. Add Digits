"""
Given a non-negative integer num, repeatedly add all its digits until the result has only one digit.

For example:

Given num = 38, the process is like: 3 + 8 = 11, 1 + 1 = 2. Since 2 has only one digit, return it.

Follow up:
Could you do it without any loop/recursion in O(1) runtime?
"""

#1 iterative 
class Solution(object):
    def addDigits(self, num):
        """
        :type num: int
        :rtype: int
        """
        while num>=10:
            num = sum(map(int,str(num)))
        return num
        
#2 iterative
class Solution(object):
    def addDigits(self, num):
            """
            :type num: int
            :rtype: int
            """
            while(num >= 10):
                temp = 0
                while(num > 0):
                    temp += num % 10
                    num /= 10
                num = temp
            return num
            
#3 mathmatical method: (n - 1) % 9 + 1 [use -1 +1 to avoid the situation that when num is 9n, the result of n%9 is 0 rather than 9]
class Solution(object):
    def addDigits(self, num):
            """
            :type num: int
            :rtype: int
            """
            if num == 0: return 0
            else: return (num - 1) % 9 + 1
            #or
            #return (num % 9 or 9) if num else 0
            #or
            #return num % 9 if num % 9 else 9 if num else 0
            
            
