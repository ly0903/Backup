"""
Given a roman numeral, convert it to an integer.
Input is guaranteed to be within the range from 1 to 3999.
"""

//cpp1 unordered map
class Solution {
public:
    int romanToInt(string s) {
        unordered_map<char, int> r_i = {
            {'I', 1},
            {'V', 5},
            {'X', 10},
            {'L', 50},
            {'C', 100},
            {'D', 500},
            {'M', 1000},
        };
        int sum = r_i[s.back()];
        for (int i = s.length()-2; i>=0; --i){
            if (r_i[s[i]] < r_i[s[i+1]]){
                sum -= r_i[s[i]];
            }
            else{
                sum += r_i[s[i]];
            }
        }
    return sum;
    }
};
/*
class Solution {
public:
    int romanToInt(string s) {
        unordered_map<char, int> T = { { 'I' , 1 }, { 'V' , 5 }, { 'X' , 10 }, { 'L' , 50 }, { 'C' , 100 }, { 'D' , 500 }, { 'M' , 1000 } };
        int sum = T[s.back()];
        for(int i = s.length() - 2; i >= 0; --i){
            sum +=  (T[s[i]] < T[s[i+1]] ? -T[s[i]] : T[s[i]]);
        }
        return sum;
    }
};
*/

//cpp2 vector faster
class Solution {
public:
    int romanToInt(string s) {
        if (s.empty()) return 0;
        int roman[24] = {};
        roman['I' - 'A'] = 1;
        roman['V' - 'A'] = 5;
        roman['X' - 'A'] = 10;
        roman['L' - 'A'] = 50;
        roman['C' - 'A'] = 100;
        roman['D' - 'A'] = 500;
        roman['M' - 'A'] = 1000;
        auto sum = 0;
        auto right = roman[s.front() - 'A'];
        for (int i = 1; i < s.size(); ++i) {
            auto curr = right;
            right = roman[s[i] - 'A'];
            if (right > curr) 
                sum -= curr;
            else 
                sum += curr;
        }
        return sum + right;
    }
};

//cpp3


#python1 add the first one first
class Solution(object):
    def romanToInt(self, s):
        """
        :type s: str
        :rtype: int
        """
        d = {'I':1, 'V':5, 'X':10, 'L':50, 'C':100, 'D':500, 'M':1000}
        r = d[s[0]]
        for i in range(1, len(s)):
            if d[s[i]] <= d[s[i-1]]:
                r += d[s[i]]
            elif d[s[i]] > d[s[i-1]]:
                r += d[s[i]] - 2*d[s[i-1]]
        return r

#python2 quicker
#the last letter is always added. Except the last one, if one letter is less than its latter one, this letter is subtracted.
class Solution(object):
    def romanToInt(self, s):
        """
        :type s: str
        :rtype: int
        """
        d = {'I':1, 'V':5, 'X':10, 'L':50, 'C':100, 'D':500, 'M':1000}
        r = 0
        for i in range(0, len(s)-1):
            if d[s[i]] >= d[s[i+1]]:
                r += d[s[i]]
            elif d[s[i]] < d[s[i+1]]:
                r -= d[s[i]]
        return r+d[s[-1]]
